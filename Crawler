package crawler;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import dao.Project;
import dao.ProjectDao;
import okhttp3.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import javax.net.ssl.*;
import java.io.IOException;
import java.lang.reflect.Type;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

public class Crawler {
    // 过滤到不统计的 url
    private HashSet<String> urlBlackList = new HashSet<>(); // 不统计的 url 黑名单
    // 1. 先创建一个 OkHttpClient 对象，只要一个程序中包含一个实例即可
    // 而像getPage里面的 Request,Call,Response 这些就需要每次请求都创建
    private OkHttpClient okHttpClient = Crawler.getUnsafeOkHttpClient(); // 后面这个方法是获取到证书认证资格的 okHttp
    private Gson gson = new GsonBuilder().create();

    {
        urlBlackList.add("https://github.com/events");
        urlBlackList.add("https://github.com/about");
    }

    public Crawler() throws KeyManagementException, NoSuchAlgorithmException {
    }


    public static void main(String[] args) throws IOException, KeyManagementException, NoSuchAlgorithmException {
        Crawler crawler = new Crawler();

        long startTime = System.currentTimeMillis();

        // 1. 获取入口页面
        String html = crawler.getPage
                ("https://github.com/akullpp/awesome-java/blob/master/README.md");
        // System.out.println(html);

        long finishTime = System.currentTimeMillis();
        System.out.println("获取入口界面时间： " + (finishTime - startTime) + " ms");
        // 原始结果：2.7秒

        // 2. 解析入口页面，获取项目列表
        List<Project> projects = crawler.parseProjectList(html);
        // System.out.println(projects);

        System.out.println("解析项目列表的时间： "
                + (System.currentTimeMillis() - finishTime) + "ms");
        // 原始结果：1秒
        finishTime = System.currentTimeMillis();

        // 3. 遍历项目列表，调用 github API 获取项目信息
        for (int i = 0; i < projects.size(); i++) {
            try {
                Project project = projects.get(i);
                String repoName = crawler.getRepoName(project.getUrl());
                String jsonString = crawler.getRepoInfo(repoName);
//            System.out.println(jsonString);
//            System.out.println("=========================");
                // 4. 解析每个仓库获取到的 JSON 数据，得到需要的信息
                crawler.parseRepoInfo(jsonString, project);
//                System.out.println(project);
//                System.out.println("===========================");
                System.out.println("crawing+ " + project.getName() + " done!");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        System.out.println("解析所有项目的时间： "
                + (System.currentTimeMillis() - finishTime) + " ms");
        // 原始结果：204秒
        finishTime = System.currentTimeMillis();

        // 5. 把 project 保存到数据库中
        ProjectDao projectDao = new ProjectDao();
        for (int i = 0; i < projects.size(); i++) {
            Project project = projects.get(i);
            projectDao.save(project);
        }

        System.out.println("储存数据库的时间： "
                + (System.currentTimeMillis() - finishTime) + " ms");
        // 原始结果：23秒
        finishTime = System.currentTimeMillis();
        System.out.println("整个项目的获取时间： " + (finishTime - startTime) + " ms");
        // 原始结果：232秒
    }

    // 使用 okHttp 库
    public String getPage(String url) throws IOException {
        // 2. 创建一个 Request 对象
        //    Java 中实例化一个对象又很多种方式
        //    可以直接new，也可以使用某个静态的工厂方法来创建实例
        //    Builder 中提供的 url 方法能够设定当前请求的 url
        //    这个代码中设计到一系列的链式调用，具体方法可以在官网查看
        Request request = new Request.Builder().url(url).build();
        // 3. 创建一个 Call 对象（这个对象负责进行一次网络访问操作）
        // 请求准备就绪
        Call call = okHttpClient.newCall(request);
        // 4. 发送请求给服务器，获取到 response 对象（这个就包含了http的响应内容）
        Response response = call.execute();
        // 5. 判定响应是否成功
        // 这个响应有可能成功也可能失败，需要判断
        if (!response.isSuccessful()) {
            System.out.println("请求失败！");
            return null;
        }
        return response.body().string();
    }

    // 使用 Jsoup 库
        public List<Project> parseProjectList(String html) {
        ArrayList<Project> result = new ArrayList<>();
        // 使用 Jsoup 分析一下页面结构，把其中的 li 标签都获取到
        // 1. 先创建一个 Document 对象（文档对象，对应一个 html）
        //    相当于把一个 html 字符串转换成 Document 对象
        //    Document 相当于一个描述页面的树形结构（类似于一个n叉树）
        Document document = Jsoup.parse(html);
        // 2. 使用 gerElementByTag 方法来获取所有的 li 标签
        Elements elements = document.getElementsByTag("li");
        for (Element li : elements) {
            // 再去获取里面的 a 标签
            Elements allLink = li.getElementsByTag("a");
            if (allLink.size() == 0) {
                // 当前的这个 li 标签中没有包含 a 标签，这届忽略掉这个 li
                continue;
            }
            // 一个项目 li 里面只有一个 a 标签
            Element link = allLink.get(0);
            // 输出 a 标签中的内容
//            System.out.println(link.text()); // 输出名字
//            System.out.println(link.attr("href")); // 输出 url
//            System.out.println(li.text()); // 输出描述信息
//            System.out.println("==================");
            String url = link.attr("href");
            if (!url.startsWith("https://github.com")) {
             // 如果当前这个项目的 url 不是以 https://github.com 开头的，我们就直接丢弃掉
                    continue;
            }
            // 通过黑名单的方法过滤不进行统计的 url
            if (urlBlackList.contains(url)) {
                    continue;
            }
            Project project = new Project();
            project.setName(link.text());
            project.setUrl(link.attr("href"));
            project.setDescription(li.text());
            result.add(project);
        }
        return result;
    }

    // 调用 Github API 获取指定仓库的信息
    // reponName 形如 doov-io/doov
    public String getRepoInfo(String repoName) throws IOException {
        String userName = "Run247947183";
        String password = "Kobe458672390";
        // 进行身份认证，把用户名和密码之后，得到了一个字符串，把这个字符串放到 HTTP header 中
        // credential 是通过base64进行的转码，也可以在网上通过base64进行解码
        // 很容易被解码，所以没有实际上的意义
        String credential = Credentials.basic(userName, password);
        String url = "https://api.github.com/repos/" + repoName;
        //请求对象，Call对象，响应对象，需要重新创建
        Request request = new Request.Builder().url(url)
                .header("Authorization",credential).build();
        Call call = okHttpClient.newCall(request);
        Response response = call.execute();
        if (!response.isSuccessful()) {
            System.out.println("访问 Github API 失败! url = " + url);
            return null;
        }
        return response.body().string();
    }

    // 这个方法的功能，就是把项目的 url 提取出其中的仓库名字和作者名字
    // 例如：https://github.com/doov-io/doov => doov-io/doov
    public String getRepoName(String url) {
        // 找第一个/后的
        int lastOne = url.lastIndexOf("/");
        // 找第二个/后的
        int lastTwo = url.lastIndexOf("/", lastOne - 1);
        if (lastOne == -1 || lastTwo == -1) {
            System.out.println("当前的 URL 不是一个标准的项目 url! url : " + url);
            return null;
        }
        return url.substring(lastTwo + 1);
    }

    // 通过这个方法获取到该仓库的相关信息
    // 第一个参数 jsonString 表示 github API 获取到的结果
    // 第二个参数 project 表示解析出的 star 数、fork 数、opened_issue 数保存到 project 中
    public void parseRepoInfo(String jsonString, Project project) {
        // type 就是反射的第二个参数也就是 .class 文件
        // 相当于是获取到 HashMap<> 的.class
        Type type = new TypeToken<HashMap<String, Object>>(){}.getType();
        HashMap<String, Object> hashMap = gson.fromJson(jsonString, type);
        // hashMap 中的key的名字都是源于 Gtihub API 的返回值
        Double startCount = (Double)hashMap.get("stargazers_count");
        project.setStarCount(startCount.intValue());
        Double forksCount = (Double)hashMap.get("forks_count");
        project.setForkCount(forksCount.intValue());
        Double openedIssueCount = (Double)hashMap.get("open_issues_count");
        project.setOpenIssueCount(openedIssueCount.intValue());
    }




    // 证书解决方法：
    public static OkHttpClient getUnsafeOkHttpClient() throws NoSuchAlgorithmException,
            KeyManagementException {

        try {
            TrustManager[] trustAllCerts = new TrustManager[] {
                    new X509TrustManager() {

                        @Override
                        public void checkClientTrusted(X509Certificate[] x509Certificates, String s)
                                throws CertificateException {
                        }
                        @Override
                        public void checkServerTrusted(X509Certificate[] x509Certificates, String s)
                                throws CertificateException {
                        }
                        @Override
                        public X509Certificate[] getAcceptedIssuers() {
                            return new X509Certificate[0];
                        }
                    }
            } ;
            final SSLContext sslContext = SSLContext.getInstance("SSL");
            sslContext.init(null, trustAllCerts, new SecureRandom());
            final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
            OkHttpClient.Builder builder = new OkHttpClient.Builder();
            builder.sslSocketFactory(sslSocketFactory);

            builder.hostnameVerifier(new HostnameVerifier() {
                @Override
                public boolean verify(String s, SSLSession sslSession) {
                    return true;
                }
            });
            return builder.build();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

}
